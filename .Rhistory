x <- 1
print (x)
x <- 2
print (x)
x(2) <- 4
x[2] <- 4
print x
print(x)
y <- 1L
print(y)
msg <- hello
msg <- "Hello"
print(msg)
x[2:1] <- 10
print(x)
x[2:2] <- 20
x <- 1:20
print x
print(x)
x
:
xor(4 >= 9, 8 != 8.0)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
exit()
quit()
setwd("C://Users//Joe.Walters//Desktop//Google Drive//Data Scientist Specialization//R Programming//Swirl//")
library(swirl)
swirl()
bye()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
library(swirl)
swirl()
mydf <- read.csv(parth2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
(cran,r_arch:country)
select(cran,r_arch:country)
select(cran,country:r_arch)
select(cran,country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, 5:20)
select(X, -5:20)
select(cran, -5)
-5:20
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.1.1", country == "IN")
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 and r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, auv_butes = mean(size))
summarize(cran, auv_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df()
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
source('C:/Users/JOE~1.WAL/AppData/Local/Temp/RtmpEtVcTK/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts,20)
arrange(top_counts, count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrnage(top_unique, desc(unique))
arrange(top_unique, desc(unique))
submit()
submit()
submit()
source('~/.active-rstudio-document')
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(cran, ip_id, country, package, size) %>%
print
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
con  = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
nchar(htmlCode, 30)
?nchar
htmlCode[20]
nchar(htmlCode[20])
nchar(htmlCode[10])
nchar(htmlCode[30])
nchar(htmlCode[100])
quit()
source("swirl")
library(swirl)
swirl()
library(tidyr).
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
students2 %>%
submit
submit()
submit()
students3
submit()
?spread
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class, test) %>%
print
submit()
submit()
submit()
students3
students5 <- gather(students3, class, grade, class1:class5, na.rm = TRUE)
students5
students6 <- spread(students5, name, test)
students6 <- spread(students5, name, class)
students6 <- spread(students5, name, class, test)
students6 <- spread(students5, test, grade)
students6
submit()
try extract_numeric("class5")
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
students4
submit()
passed
failed
passed <- mutate(passed, status = c("passed"))
passed <- passed %>% mutate(passed, status = c("passed"))
passed <- passed %>% mutate(status = c("passed"))
passed <- passed %>% mutate(status = ("passed"))
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
sattest <- select(-contains("total"))
sattest <- select(sat, -contains("total"))
names(sattest)
sattest2 <- gather(sattest, part_sex, count, -score_range)
sattest2
sattest3 <- separate(sattest2, part_sex, "sex")
sattest3 <- separate(sattest2, part_sex, into())
sattest3 <- separate(sattest2, part_sex, count)
sattest3 <- separate(sattest2, part_sex, into("part","sex"),sep="_")
sattest3 <- separate(sattest2, part_sex, ("part","sex"),sep="_")
sattest3 <- separate(sattest2, part_sex, into("part","sex"),sep="_")
sattest3 <- separate(sattest2, part_sex, into= c("part","sex"),sep="_")
sattest3
submit()
submit()
library(plyr)
## library(dplyr)
## Imports Activity Labels and Features
## Filters out Feauters to Mean, mean and std variables
filePath <- c("./activity_labels.txt")
activities <- read.table(filePath, header = FALSE)
colnames(activities) <- c("ActivityCode","Activity")
filePath <- c("./activity_labels.txt")
activities <- read.table(filePath, header = FALSE)
colnames(activities) <- c("ActivityCode","Activity")
library(nlme)
? nlme
? lattice
setwd("C://Users/Joe.Walters/Desktop/Google Drive/Coursera/Reproducible Research/Project 1/RepData_PeerAssessment1")
library(plyr)
library(ggplot2)
library(data.table)
filePath <- c("./activity.csv")
activities <- read.csv(filePath, header = TRUE)
act <- subset(activities, steps != "NA")
DailyTotal <- ddply(act, c("date"),summarize,TotalSteps=sum(steps))
hist(DailyTotal$TotalSteps)
head(activities, n = 50L)
head(DailyAvg, n = 20L)
df<-data.table(activities,key="interval")
avg <- data.table()
DailyTotal <- ddply(act, c("date"),summarize,TotalSteps=sum(steps))
hist(DailyTotal$TotalSteps)
paste("Median steps per day: ",median(DailyTotal$TotalSteps))
paste("Mean steps per day: ",mean(DailyTotal$TotalSteps))
IntervalAvg[IntervalAvg$AvgSteps==max(IntervalAvg$AvgSteps),1]
IntervalAvg <- ddply(act, c("interval"),summarize,AvgSteps=mean(steps))
IntervalAvg[IntervalAvg$AvgSteps==max(IntervalAvg$AvgSteps),1]
activities[!is.null(activities$Steps),]
activities[!is.na(activities$Steps),]
is.na(acitivites$Steps)
is.na(activites$Steps)
activities
class(activities)
head(activities)
is.na(activities$Steps)
is.nan(activities$Steps)
is.null(activities$Steps)
activites[is.null(activities$Steps),]
activities[is.null(activities$Steps),]
activities[is.null(activities$Steps)==TRUE,]
activities[is.null(activities$Steps)==FALSE,]
activities[is.na(activities$Steps),]
activities[is.na(activities$Steps)]
test <- activities[is.na(activities$Steps),]
test
head(activities)
test <- activities[!is.na(activities$Steps),]
is.na(activities$Steps)
Steps <- activities$Steps
head(Steps)
activities[is.na(activities$steps)]
activities[is.na(activities$steps),]
activities[!is.null(activities$steps),]
activities[!is.na(activities$steps),]
activities[is.na(activities$steps),]
paste("Total missing values: ", count(activities[is.na(activities$steps),]))
paste("Total missing values: ", count(activities[is.na(activities$steps),]))
Count(activities[is.na(activities$steps),])
count(activities[is.na(activities$steps),])
paste("Total missing values: ", length(activities[is.na(activities$steps),]))
test <- activities[is.na(activities$steps),]
rows(test)
length(test)
rows(test)
dim(test)
paste("Total missing values: ", nrow(activities[is.na(activities$steps),]))
DailyAvg <- ddply(act, c("date"),summarize,TotalSteps=mean(steps))
View(activities)
activities <- merge[activities, DailyAvg, by.x = "date", by.y = "date"]
activities <- merge(activities, DailyAvg, by.x = "date", by.y = "date")
head(activities)
DailyAvg <- ddply(act, c("date"),summarize,imputedsteps=mean(steps))
activities <- merge(activities, DailyAvg, by.x = "date", by.y = "date")
activities <- read.csv(filePath, header = TRUE)
paste("Total missing values: ", nrow(activities[is.na(activities$steps),]))
DailyAvg <- ddply(act, c("date"),summarize,imputedsteps=mean(steps))
activities <- merge(activities, DailyAvg, by.x = "date", by.y = "date")
view(DailyAvg)
View(DailyAvg)
paste(mean(DailyAvg))
View(DailyAvg$imputedsteps)
paste(mean(DailyAvg$imputedsteps))
activities <- read.csv(filePath, header = TRUE)
act <- subset(activities, steps != "NA")
IntervalAvg <- ddply(act, c("interval"),summarize,AvgSteps=mean(steps))
activities <- merge(activities, IntervalAvg, by.x = "interval", by.y = "interval")
head(activities)
activities <- merge(activities, IntervalAvg, by.x = "interval", by.y = "interval")
head(activities)
activities[-AvgSteps.x]
activities[,-AvgSteps.x]
activities[,-AvgSteps]
activities[,-4]
activities <- read.csv(filePath, header = TRUE)
act <- subset(activities, steps != "NA")
activities <- merge(activities, IntervalAvg, by.x = "interval", by.y = "interval")
head(activities)
IntervalAvg <- ddply(act, c("interval"),summarize,avgsteps=mean(steps))
activities <- read.csv(filePath, header = TRUE)
act <- subset(activities, steps != "NA")
activities <- merge(activities, IntervalAvg, by.x = "interval", by.y = "interval")
head(activities)
activities[!is.na(activities$steps),activities$avgsteps] <- activities[,activities$steps]
head(activities)
activities[!is.na(activities$steps),activities$avgsteps]
activities[,activities$avgsteps]
head(activities)
activities[,4]
activities[,$avgsteps]
activities[,activities$avgsteps]
activities[,activities$steps]
activities[,$steps]
class(activities)
activities[,steps]
activities[,c("steps")]
activities[!is.na(activities$steps),c("avgsteps")"] <- activities[,c("steps")"]
activities[!is.na(activities$steps),c("avgsteps")] <- activities[,c("steps")"]
activities$imputedsteps <- activities$steps
activities[,c("steps")"]
activities[!is.na(activities$steps),c("avgsteps")] <- activities[,c("steps")]
activities <- read.csv(filePath, header = TRUE)
act <- subset(activities, steps != "NA")
activities <- merge(activities, IntervalAvg, by.x = "interval", by.y = "interval")
head(activities)
activities[!is.na(activities$steps),c("avgsteps")] <- activities[!is.na(activities$steps),c("steps")]
head(activities)
head(weekdays(activities$date))
weekdays(activities$date)
weekdays(activities$date, abbreviate = FALSE)
ImpDailyTotal <- ddply(activities, c("date"),summarize,TotalImputedSteps=sum(imputedsteps))
rename(activities,c("avgsteps"="imputedsteps")
rename(activities,c("avgsteps"="imputedsteps"))
head(activities)
rename(activities,c("avgsteps"="imputedsteps"))
activities <- rename(activities,c("avgsteps"="imputedsteps"))
rename(activities,c("avgsteps"="imputedsteps"))
head(activities)
ImpDailyTotal <- ddply(activities, c("date"),summarize,TotalImputedSteps=sum(imputedsteps))
hist(ImpDailyTotal$TotalImputedSteps)
paste("Median steps per day: ",median(ImpDailyTotal$TotalImputedSteps))
paste("Mean steps per day: ",mean(ImpDailyTotal$TotalImputedSteps))
test <- weekdays(activities$date,abbreviate=FALSE)
type(activities)
class(activities)
test <- weekdays(activities,origin = as.Date(activities$date, format = "%m/%d/%Y"))
activities$test <- as.Date(activities$date, format = "%m/%d/%Y"))
activities$test <- as.Date(activities$date, format = "%m/%d/%Y")
head(activities)
activities$test <- as.Date(activities$date)
head(activities)
activities$test <- workdays(as.Date(activities$date))
activities$test <- weekdays(as.Date(activities$date))
activities$dayofweek <- weekdays(as.Date(activities$date))
activities[c("dayofweek") %in% C("Saturday","Sunday"),] <- c("Weekend")
activities[c("dayofweek") %in% c("Saturday","Sunday"),c("weekend")] <- c("Weekend")
activities[c("dayofweek") %not in% c("Saturday","Sunday"),c("weekend")] <- c("Weekday")
activities[!(c("dayofweek") %in% c("Saturday","Sunday")),c("weekend")] <- c("Weekday")
activities[,c("weekend")] <- as.factor(activities[,c("weekend")])
ImpIntervalAvg <- ddply(activities, c("interval","weekend"),summarize,avgsteps=mean(steps))
head(ImpIntervalAvg)
ImpIntervalAvg <- ddply(activities, c("interval","weekend"),summarize,avgsteps=mean(imputedsteps))
head(ImpIntervalAvg)
plot(ImpIntervalAvg$interval, ImpIntervalAvg$avgsteps, type = "l", xlab ="Interval", ylab = "Average Steps")
? densityplot
??densityplot
densityplot(~ImpIntervalAvg$interval|ImpIntervalAvg$weekend,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
library(lattice)
densityplot(~ImpIntervalAvg$interval|ImpIntervalAvg$weekend,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
ImpIntervalAvg
ImpIntervalAvg <- ddply(activities, .(interval,weekend),summarize,avgsteps=mean(imputedsteps))
ImpIntervalAvg <- ddply(activities, .(weekend),summarize,avgsteps=mean(imputedsteps))
activities[!(c("dayofweek") %in% c("Saturday","Sunday")),c("weekend")] <- c("Weekday")
activities[c("dayofweek") %in% c("Saturday","Sunday"),c("weekend")] <- c("Weekend")
activities[c("dayofweek") %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),c("weekend")] <- c("Weekday")
activities[c("dayofweek") %in% c("Saturday","Sunday"),c("weekend2")] <- c("Weekend")
activities[c("dayofweek") %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),c("weekend2")] <- c("Weekday")
activities$weekend2 <- as.factor(activities$weekend2)
head(activities)
activities$weekend2 <- factor(activities$weekend2)
activities[c("dayofweek") %in% c("Saturday","Sunday"),c("weekend2")] <- c("Weekend")
activities[c("dayofweek") %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),c
activities[c("dayofweek") %in% c("Saturday","Sunday"),c("weekend3")] <- c("Weekend")
activities[c("dayofweek") %in% c("Saturday","Sunday"),c("weekend3")] <- c("Weekend")
View(activities)
activities[c("dayofweek") %in% c("Saturday","Sunday"),]
activities[c("dayofweek") in c("Saturday","Sunday"),]
activities[c("dayofweek") %in% c("Saturday","Sunday"),]
activities[c("dayofweek") == c("Saturday"),]
activities[activities$dayofweek == c("Saturday"),]
activities[activities$dayofweek %in% c("Saturday","Sunday"),]
activities[activities$dayofweek %in% c("Saturday","Sunday"),c("weekend")] <- c("Weekend")
activities <- read.csv(filePath, header = TRUE)
act <- subset(activities, steps != "NA")
activities$dayofweek <- weekdays(as.Date(activities$date))
activities[activities$dayofweek %in% c("Saturday","Sunday"),c("weekend")] <- c("Weekend")
activities[activities$dayofweek %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),c("weekend")] <- c("Weekday")
View(activities)
View(activities,n=5000)
View(activities,nrows=5000)
view(activities)
View(activities)
activities$weekend <- factor(activities$weekend)
activities <- merge(activities, IntervalAvg, by.x = "interval", by.y = "interval")
activities <- rename(activities,c("avgsteps"="imputedsteps"))
activities[!is.na(activities$steps),c("avgsteps")] <- activities[!is.na(activities$steps),c("steps")]
ImpDailyTotal <- ddply(activities, c("date"),summarize,TotalImputedSteps=sum(imputedsteps))
ImpIntervalAvg <- ddply(activities, .(Interval,weekend),summarize,avgsteps=mean(imputedsteps))
ImpIntervalAvg <- ddply(activities, .(interval,weekend),summarize,avgsteps=mean(imputedsteps))
densityplot(~ImpIntervalAvg$interval|ImpIntervalAvg$weekend,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
qplot(ImpIntervalAvg$interval, ImpIntervalAvg$avgsteps, facets = ImpIntervalAvg$weekend)
qplot(interval, imputedsteps, data=ImpIntervalAvg)
qplot(interval, avgimpsteps, data=ImpIntervalAvg)
ImpIntervalAvg <- ddply(activities, .(interval,weekend),summarize,avgimpsteps=mean(imputedsteps))
qplot(interval, avgimpsteps, data=ImpIntervalAvg)
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = weekend)
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = ~.weekend)
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = ~weekend)
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = ~weekend, geom=c("line"))
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = weekend ~, geom=c("line"))
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = weekend~, geom=c("line"))
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = weekend, geom=c("line"))
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = ~weekend., geom=c("line"))
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = .weekend~, geom=c("line"))
qplot(interval, avgimpsteps, data=ImpIntervalAvg, facets = weekend ~ ., geom=c("line"))
View(ImpIntervalAvg)
ImpIntervalAvgtest <- ddply(activities, .(interval,summarize,avgimpsteps=mean(imputedsteps))
ImpIntervalAvgtest <- ddply(activities, .(interval),summarize,avgimpsteps=mean(imputedsteps))
View(ImpIntervalAvgtest)
ImpIntervalAvgtest <- ddply(activities, .(weekend),summarize,avgimpsteps=mean(imputedsteps))
View(ImpIntervalAvgtest)
td <- rep(c("weekend","weekday"), times = 5)
td[,1] <- rep(c("weekend","weekday"), times = 5)
td2[,1] <- rep(c("weekend","weekday"), times = 5)
td2 <- data.frame(rep(c("weekend","weekday"), times = 5), 1:10)
td2
names(td2) <- c("dow","steps")
td2
tdstat <- ddply(td2, c("dow"),summarize,avgsteps=mean(steps))
tdstat
tdstat <- ddply(td2, c("dow"),summarize,avgsteps=mean(steps),totalsteps=sum(steps))
tdstat
td2 <- data.frame(rep(c("weekend","weekday"), times = 16), rep(c("day","night","night","day"), times = 8), 1:32)
names(td2) <- c("dow","time","steps")
td2
tdstat <- ddply(td2, c("dow","time"),summarize,avgsteps=mean(steps),totalsteps=sum(steps))
tdstat
tdstat <- ddply(td2, c("dow","time"),summarize,n=count(steps),avgsteps=mean(steps),totalsteps=sum(steps))
tdstat <- ddply(td2, c("dow","time"),summarize,n=count(steps),avgsteps=mean(steps),totalsteps=sum(steps))
tdstat <- ddply(td2, c("dow","time"),summarize,avgsteps=mean(steps),totalsteps=sum(steps))
tdstat
hist(DailyTotal$TotalSteps, main="Histogram of Total Steps")
hist(DailyTotal$TotalSteps, main="Histogram of Daily Total Steps", xlab="Total Steps", col=c("blue")
)
